/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UniversalImport } from './routes/_universal'
import { Route as PublicImport } from './routes/_public'
import { Route as PrivateImport } from './routes/_private'
import { Route as PublicIndexImport } from './routes/_public/index'
import { Route as UniversalPrivacyPolicyImport } from './routes/_universal/privacy-policy'
import { Route as UniversalAboutImport } from './routes/_universal/about'
import { Route as PublicResetPasswordImport } from './routes/_public/reset-password'
import { Route as PublicRegisterTokenImport } from './routes/_public/register-token'
import { Route as PublicForgotPasswordImport } from './routes/_public/forgot-password'
import { Route as PrivateTrendsImport } from './routes/_private/trends'
import { Route as PrivateSettingsImport } from './routes/_private/settings'
import { Route as PrivateHallOfFameImport } from './routes/_private/hall-of-fame'
import { Route as PrivateGlobalStatsImport } from './routes/_private/global-stats'
import { Route as PrivateComingNextImport } from './routes/_private/coming-next'
import { Route as UniversalLevelsProfileLevelsImport } from './routes/_universal/levels.profile-levels'
import { Route as PublicOauth2ProviderCallbackImport } from './routes/_public/oauth2.$provider.callback'
import { Route as PrivateStatsMediaTypeUsernameImport } from './routes/_private/stats/$mediaType.$username'
import { Route as PrivateProfileUsernameHeaderImport } from './routes/_private/profile/$username/_header'
import { Route as PrivateListMediaTypeUsernameImport } from './routes/_private/list/$mediaType.$username'
import { Route as PrivateDetailsMediaTypeMediaIdImport } from './routes/_private/details/$mediaType.$mediaId'
import { Route as PrivateProfileUsernameHeaderIndexImport } from './routes/_private/profile/$username/_header/index'
import { Route as PrivateProfileUsernameHeaderHistoryImport } from './routes/_private/profile/$username/_header/history'
import { Route as PrivateProfileUsernameHeaderFollowsImport } from './routes/_private/profile/$username/_header/follows'
import { Route as PrivateProfileUsernameHeaderFollowersImport } from './routes/_private/profile/$username/_header/followers'
import { Route as PrivateDetailsEditMediaTypeMediaIdImport } from './routes/_private/details/edit.$mediaType.$mediaId'
import { Route as PrivateDetailsMediaTypeJobNameImport } from './routes/_private/details/$mediaType.$job.$name'

// Create Virtual Routes

const PrivateProfileUsernameImport = createFileRoute(
  '/_private/profile/$username',
)()

// Create/Update Routes

const UniversalRoute = UniversalImport.update({
  id: '/_universal',
  getParentRoute: () => rootRoute,
} as any)

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const PrivateRoute = PrivateImport.update({
  id: '/_private',
  getParentRoute: () => rootRoute,
} as any)

const PublicIndexRoute = PublicIndexImport.update({
  path: '/',
  getParentRoute: () => PublicRoute,
} as any)

const UniversalPrivacyPolicyRoute = UniversalPrivacyPolicyImport.update({
  path: '/privacy-policy',
  getParentRoute: () => UniversalRoute,
} as any)

const UniversalAboutRoute = UniversalAboutImport.update({
  path: '/about',
  getParentRoute: () => UniversalRoute,
} as any)

const PublicResetPasswordRoute = PublicResetPasswordImport.update({
  path: '/reset-password',
  getParentRoute: () => PublicRoute,
} as any)

const PublicRegisterTokenRoute = PublicRegisterTokenImport.update({
  path: '/register-token',
  getParentRoute: () => PublicRoute,
} as any)

const PublicForgotPasswordRoute = PublicForgotPasswordImport.update({
  path: '/forgot-password',
  getParentRoute: () => PublicRoute,
} as any)

const PrivateTrendsRoute = PrivateTrendsImport.update({
  path: '/trends',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateSettingsRoute = PrivateSettingsImport.update({
  path: '/settings',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateHallOfFameRoute = PrivateHallOfFameImport.update({
  path: '/hall-of-fame',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateGlobalStatsRoute = PrivateGlobalStatsImport.update({
  path: '/global-stats',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateComingNextRoute = PrivateComingNextImport.update({
  path: '/coming-next',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateProfileUsernameRoute = PrivateProfileUsernameImport.update({
  path: '/profile/$username',
  getParentRoute: () => PrivateRoute,
} as any)

const UniversalLevelsProfileLevelsRoute =
  UniversalLevelsProfileLevelsImport.update({
    path: '/levels/profile-levels',
    getParentRoute: () => UniversalRoute,
  } as any)

const PublicOauth2ProviderCallbackRoute =
  PublicOauth2ProviderCallbackImport.update({
    path: '/oauth2/$provider/callback',
    getParentRoute: () => PublicRoute,
  } as any)

const PrivateStatsMediaTypeUsernameRoute =
  PrivateStatsMediaTypeUsernameImport.update({
    path: '/stats/$mediaType/$username',
    getParentRoute: () => PrivateRoute,
  } as any)

const PrivateProfileUsernameHeaderRoute =
  PrivateProfileUsernameHeaderImport.update({
    id: '/_header',
    getParentRoute: () => PrivateProfileUsernameRoute,
  } as any)

const PrivateListMediaTypeUsernameRoute =
  PrivateListMediaTypeUsernameImport.update({
    path: '/list/$mediaType/$username',
    getParentRoute: () => PrivateRoute,
  } as any)

const PrivateDetailsMediaTypeMediaIdRoute =
  PrivateDetailsMediaTypeMediaIdImport.update({
    path: '/details/$mediaType/$mediaId',
    getParentRoute: () => PrivateRoute,
  } as any)

const PrivateProfileUsernameHeaderIndexRoute =
  PrivateProfileUsernameHeaderIndexImport.update({
    path: '/',
    getParentRoute: () => PrivateProfileUsernameHeaderRoute,
  } as any)

const PrivateProfileUsernameHeaderHistoryRoute =
  PrivateProfileUsernameHeaderHistoryImport.update({
    path: '/history',
    getParentRoute: () => PrivateProfileUsernameHeaderRoute,
  } as any)

const PrivateProfileUsernameHeaderFollowsRoute =
  PrivateProfileUsernameHeaderFollowsImport.update({
    path: '/follows',
    getParentRoute: () => PrivateProfileUsernameHeaderRoute,
  } as any)

const PrivateProfileUsernameHeaderFollowersRoute =
  PrivateProfileUsernameHeaderFollowersImport.update({
    path: '/followers',
    getParentRoute: () => PrivateProfileUsernameHeaderRoute,
  } as any)

const PrivateDetailsEditMediaTypeMediaIdRoute =
  PrivateDetailsEditMediaTypeMediaIdImport.update({
    path: '/details/edit/$mediaType/$mediaId',
    getParentRoute: () => PrivateRoute,
  } as any)

const PrivateDetailsMediaTypeJobNameRoute =
  PrivateDetailsMediaTypeJobNameImport.update({
    path: '/details/$mediaType/$job/$name',
    getParentRoute: () => PrivateRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_private': {
      id: '/_private'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivateImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/_universal': {
      id: '/_universal'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UniversalImport
      parentRoute: typeof rootRoute
    }
    '/_private/coming-next': {
      id: '/_private/coming-next'
      path: '/coming-next'
      fullPath: '/coming-next'
      preLoaderRoute: typeof PrivateComingNextImport
      parentRoute: typeof PrivateImport
    }
    '/_private/global-stats': {
      id: '/_private/global-stats'
      path: '/global-stats'
      fullPath: '/global-stats'
      preLoaderRoute: typeof PrivateGlobalStatsImport
      parentRoute: typeof PrivateImport
    }
    '/_private/hall-of-fame': {
      id: '/_private/hall-of-fame'
      path: '/hall-of-fame'
      fullPath: '/hall-of-fame'
      preLoaderRoute: typeof PrivateHallOfFameImport
      parentRoute: typeof PrivateImport
    }
    '/_private/settings': {
      id: '/_private/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof PrivateSettingsImport
      parentRoute: typeof PrivateImport
    }
    '/_private/trends': {
      id: '/_private/trends'
      path: '/trends'
      fullPath: '/trends'
      preLoaderRoute: typeof PrivateTrendsImport
      parentRoute: typeof PrivateImport
    }
    '/_public/forgot-password': {
      id: '/_public/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof PublicForgotPasswordImport
      parentRoute: typeof PublicImport
    }
    '/_public/register-token': {
      id: '/_public/register-token'
      path: '/register-token'
      fullPath: '/register-token'
      preLoaderRoute: typeof PublicRegisterTokenImport
      parentRoute: typeof PublicImport
    }
    '/_public/reset-password': {
      id: '/_public/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof PublicResetPasswordImport
      parentRoute: typeof PublicImport
    }
    '/_universal/about': {
      id: '/_universal/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof UniversalAboutImport
      parentRoute: typeof UniversalImport
    }
    '/_universal/privacy-policy': {
      id: '/_universal/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/privacy-policy'
      preLoaderRoute: typeof UniversalPrivacyPolicyImport
      parentRoute: typeof UniversalImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexImport
      parentRoute: typeof PublicImport
    }
    '/_universal/levels/profile-levels': {
      id: '/_universal/levels/profile-levels'
      path: '/levels/profile-levels'
      fullPath: '/levels/profile-levels'
      preLoaderRoute: typeof UniversalLevelsProfileLevelsImport
      parentRoute: typeof UniversalImport
    }
    '/_private/details/$mediaType/$mediaId': {
      id: '/_private/details/$mediaType/$mediaId'
      path: '/details/$mediaType/$mediaId'
      fullPath: '/details/$mediaType/$mediaId'
      preLoaderRoute: typeof PrivateDetailsMediaTypeMediaIdImport
      parentRoute: typeof PrivateImport
    }
    '/_private/list/$mediaType/$username': {
      id: '/_private/list/$mediaType/$username'
      path: '/list/$mediaType/$username'
      fullPath: '/list/$mediaType/$username'
      preLoaderRoute: typeof PrivateListMediaTypeUsernameImport
      parentRoute: typeof PrivateImport
    }
    '/_private/profile/$username': {
      id: '/_private/profile/$username'
      path: '/profile/$username'
      fullPath: '/profile/$username'
      preLoaderRoute: typeof PrivateProfileUsernameImport
      parentRoute: typeof PrivateImport
    }
    '/_private/profile/$username/_header': {
      id: '/_private/profile/$username/_header'
      path: '/profile/$username'
      fullPath: '/profile/$username'
      preLoaderRoute: typeof PrivateProfileUsernameHeaderImport
      parentRoute: typeof PrivateProfileUsernameRoute
    }
    '/_private/stats/$mediaType/$username': {
      id: '/_private/stats/$mediaType/$username'
      path: '/stats/$mediaType/$username'
      fullPath: '/stats/$mediaType/$username'
      preLoaderRoute: typeof PrivateStatsMediaTypeUsernameImport
      parentRoute: typeof PrivateImport
    }
    '/_public/oauth2/$provider/callback': {
      id: '/_public/oauth2/$provider/callback'
      path: '/oauth2/$provider/callback'
      fullPath: '/oauth2/$provider/callback'
      preLoaderRoute: typeof PublicOauth2ProviderCallbackImport
      parentRoute: typeof PublicImport
    }
    '/_private/details/$mediaType/$job/$name': {
      id: '/_private/details/$mediaType/$job/$name'
      path: '/details/$mediaType/$job/$name'
      fullPath: '/details/$mediaType/$job/$name'
      preLoaderRoute: typeof PrivateDetailsMediaTypeJobNameImport
      parentRoute: typeof PrivateImport
    }
    '/_private/details/edit/$mediaType/$mediaId': {
      id: '/_private/details/edit/$mediaType/$mediaId'
      path: '/details/edit/$mediaType/$mediaId'
      fullPath: '/details/edit/$mediaType/$mediaId'
      preLoaderRoute: typeof PrivateDetailsEditMediaTypeMediaIdImport
      parentRoute: typeof PrivateImport
    }
    '/_private/profile/$username/_header/followers': {
      id: '/_private/profile/$username/_header/followers'
      path: '/followers'
      fullPath: '/profile/$username/followers'
      preLoaderRoute: typeof PrivateProfileUsernameHeaderFollowersImport
      parentRoute: typeof PrivateProfileUsernameHeaderImport
    }
    '/_private/profile/$username/_header/follows': {
      id: '/_private/profile/$username/_header/follows'
      path: '/follows'
      fullPath: '/profile/$username/follows'
      preLoaderRoute: typeof PrivateProfileUsernameHeaderFollowsImport
      parentRoute: typeof PrivateProfileUsernameHeaderImport
    }
    '/_private/profile/$username/_header/history': {
      id: '/_private/profile/$username/_header/history'
      path: '/history'
      fullPath: '/profile/$username/history'
      preLoaderRoute: typeof PrivateProfileUsernameHeaderHistoryImport
      parentRoute: typeof PrivateProfileUsernameHeaderImport
    }
    '/_private/profile/$username/_header/': {
      id: '/_private/profile/$username/_header/'
      path: '/'
      fullPath: '/profile/$username/'
      preLoaderRoute: typeof PrivateProfileUsernameHeaderIndexImport
      parentRoute: typeof PrivateProfileUsernameHeaderImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  PrivateRoute: PrivateRoute.addChildren({
    PrivateComingNextRoute,
    PrivateGlobalStatsRoute,
    PrivateHallOfFameRoute,
    PrivateSettingsRoute,
    PrivateTrendsRoute,
    PrivateDetailsMediaTypeMediaIdRoute,
    PrivateListMediaTypeUsernameRoute,
    PrivateProfileUsernameRoute: PrivateProfileUsernameRoute.addChildren({
      PrivateProfileUsernameHeaderRoute:
        PrivateProfileUsernameHeaderRoute.addChildren({
          PrivateProfileUsernameHeaderFollowersRoute,
          PrivateProfileUsernameHeaderFollowsRoute,
          PrivateProfileUsernameHeaderHistoryRoute,
          PrivateProfileUsernameHeaderIndexRoute,
        }),
    }),
    PrivateStatsMediaTypeUsernameRoute,
    PrivateDetailsMediaTypeJobNameRoute,
    PrivateDetailsEditMediaTypeMediaIdRoute,
  }),
  PublicRoute: PublicRoute.addChildren({
    PublicForgotPasswordRoute,
    PublicRegisterTokenRoute,
    PublicResetPasswordRoute,
    PublicIndexRoute,
    PublicOauth2ProviderCallbackRoute,
  }),
  UniversalRoute: UniversalRoute.addChildren({
    UniversalAboutRoute,
    UniversalPrivacyPolicyRoute,
    UniversalLevelsProfileLevelsRoute,
  }),
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/_private",
        "/_public",
        "/_universal"
      ]
    },
    "/_private": {
      "filePath": "_private.jsx",
      "children": [
        "/_private/coming-next",
        "/_private/global-stats",
        "/_private/hall-of-fame",
        "/_private/settings",
        "/_private/trends",
        "/_private/details/$mediaType/$mediaId",
        "/_private/list/$mediaType/$username",
        "/_private/profile/$username",
        "/_private/stats/$mediaType/$username",
        "/_private/details/$mediaType/$job/$name",
        "/_private/details/edit/$mediaType/$mediaId"
      ]
    },
    "/_public": {
      "filePath": "_public.jsx",
      "children": [
        "/_public/forgot-password",
        "/_public/register-token",
        "/_public/reset-password",
        "/_public/",
        "/_public/oauth2/$provider/callback"
      ]
    },
    "/_universal": {
      "filePath": "_universal.jsx",
      "children": [
        "/_universal/about",
        "/_universal/privacy-policy",
        "/_universal/levels/profile-levels"
      ]
    },
    "/_private/coming-next": {
      "filePath": "_private/coming-next.jsx",
      "parent": "/_private"
    },
    "/_private/global-stats": {
      "filePath": "_private/global-stats.jsx",
      "parent": "/_private"
    },
    "/_private/hall-of-fame": {
      "filePath": "_private/hall-of-fame.jsx",
      "parent": "/_private"
    },
    "/_private/settings": {
      "filePath": "_private/settings.jsx",
      "parent": "/_private"
    },
    "/_private/trends": {
      "filePath": "_private/trends.jsx",
      "parent": "/_private"
    },
    "/_public/forgot-password": {
      "filePath": "_public/forgot-password.jsx",
      "parent": "/_public"
    },
    "/_public/register-token": {
      "filePath": "_public/register-token.jsx",
      "parent": "/_public"
    },
    "/_public/reset-password": {
      "filePath": "_public/reset-password.jsx",
      "parent": "/_public"
    },
    "/_universal/about": {
      "filePath": "_universal/about.jsx",
      "parent": "/_universal"
    },
    "/_universal/privacy-policy": {
      "filePath": "_universal/privacy-policy.jsx",
      "parent": "/_universal"
    },
    "/_public/": {
      "filePath": "_public/index.jsx",
      "parent": "/_public"
    },
    "/_universal/levels/profile-levels": {
      "filePath": "_universal/levels.profile-levels.jsx",
      "parent": "/_universal"
    },
    "/_private/details/$mediaType/$mediaId": {
      "filePath": "_private/details/$mediaType.$mediaId.jsx",
      "parent": "/_private"
    },
    "/_private/list/$mediaType/$username": {
      "filePath": "_private/list/$mediaType.$username.jsx",
      "parent": "/_private"
    },
    "/_private/profile/$username": {
      "filePath": "_private/profile/$username",
      "parent": "/_private",
      "children": [
        "/_private/profile/$username/_header"
      ]
    },
    "/_private/profile/$username/_header": {
      "filePath": "_private/profile/$username/_header.jsx",
      "parent": "/_private/profile/$username",
      "children": [
        "/_private/profile/$username/_header/followers",
        "/_private/profile/$username/_header/follows",
        "/_private/profile/$username/_header/history",
        "/_private/profile/$username/_header/"
      ]
    },
    "/_private/stats/$mediaType/$username": {
      "filePath": "_private/stats/$mediaType.$username.jsx",
      "parent": "/_private"
    },
    "/_public/oauth2/$provider/callback": {
      "filePath": "_public/oauth2.$provider.callback.jsx",
      "parent": "/_public"
    },
    "/_private/details/$mediaType/$job/$name": {
      "filePath": "_private/details/$mediaType.$job.$name.jsx",
      "parent": "/_private"
    },
    "/_private/details/edit/$mediaType/$mediaId": {
      "filePath": "_private/details/edit.$mediaType.$mediaId.jsx",
      "parent": "/_private"
    },
    "/_private/profile/$username/_header/followers": {
      "filePath": "_private/profile/$username/_header/followers.jsx",
      "parent": "/_private/profile/$username/_header"
    },
    "/_private/profile/$username/_header/follows": {
      "filePath": "_private/profile/$username/_header/follows.jsx",
      "parent": "/_private/profile/$username/_header"
    },
    "/_private/profile/$username/_header/history": {
      "filePath": "_private/profile/$username/_header/history.jsx",
      "parent": "/_private/profile/$username/_header"
    },
    "/_private/profile/$username/_header/": {
      "filePath": "_private/profile/$username/_header/index.jsx",
      "parent": "/_private/profile/$username/_header"
    }
  }
}
ROUTE_MANIFEST_END */
